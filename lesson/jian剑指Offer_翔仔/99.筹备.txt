自己搭建网站
自己搭建过VPS
研究翻墙啥的

不仅仅局限于技术，知识星球、极客时间、得到
喜欢研究，追求极致
买票、玩游戏、复杂的伤害计算模型

TC、各种编辑器、mongdb、文档结构、代码托管

项目管理：
参与项目整个生命周期
分发指派任务，可以用一些编程思想来体现

经常落东西，临走检查+必要通道（及时提醒）

怎么上线的，怎么运维的，怎么加班的，怎么苦逼的，怎么带人的

说一个你做过的最自豪的项目，或是最近做过的一个项目（兴趣和兴奋点）。
说一个你解决过的最难的技术问题，或是最有技术含量的问题。（解决难题的能力） === sql调优
说一个你最痛苦的项目，或最艰难的项目。（面对压力和困难时的心态）    === 结构不好，一开始没有设计好
说一个犯过的最大的技术错误，或是引发的技术故障。（错误态度，总结改进）   === 把统一用户干掉了
框架、细节、感情、思考

缺点、改正

记笔记


一、ORM框架
Object-Relational Mapping，内存中的Java对象到持久化的关系型数据库的映射
优点：大大减少重复性代码，可以直接在Java层面进行操作
缺点：多表联查语法比较复杂

ibatis是一种“半自动化”的ORM，需要开发人员自己写SQL语句

二、数据库范式
第一范式：无重复列（某个属性不能有多个值或者重复的属性 ==> 列的原子性）  == 不满足就不是关系型数据库
第二范式：属性完全依赖于主键。反例：(学号, 课程名称) → (姓名, 年龄, 成绩, 学分)里，姓名和年龄依赖于学号。所有单关键字的数据库表都符合第二范式，因为不可能存在组合关键字。
第三范式：属性不依赖于其它非主属性【消除传递依赖】。反例：(学号) → (姓名, 年龄, 所在学院, 学院地点, 学院电话)，存在(学号) → (所在学院) → (学院地点, 学院电话)的关系，存在非关键字段"学院地点"、"学院电话"对关键字段"学号"的传递函数依赖。

三、设计模式
用意：提供软件开发过程中面临的一般问题的最佳解决方案

创建型模式：隐藏创建对象的逻辑，即new等
结构型模式：类和对象的组合
行为型模式：对象之间的通信

工厂模式，工厂根据用户参数，返回接口的对应实现类的实例
抽象工厂模式，将几个不同的工厂进行抽象，生产者根据入参返回对应的工厂对象
单例模式，只能有一个对象。直接一开始就new出对象来，调用时直接return instance
适配器模式，接口的适配器类根据成员变量参数，决定把成员变量接口实现为实现类A的对象还是实现类B的对象；实际的实现类，代理了接口的适配器类，驱动他去调用
代理模式，一个类代表另一个类的功能，例如AOP的代理方式，Thread

四、红黑树

五、算法

六、永久代
垃圾回收不会出现在永久代，但是如果永久代满了会触发完全垃圾回收。
Hotspot的永久代是在方法区，主要存储的是类加载信息，静态变量以及常量，方法（字节码）等等，可以进行常量池回收和类型卸载。
如果这个常量在其它任何对象都没被引用，则可以被回收。
而类型卸载有点复杂，有以下三点要求：1.该类型的所有实例都已经被回收 2.该类型的ClassLoader已经被回收 3.该类型的java.lang.Class没有在任何地方被引用，该类型不能在任何地方以反射的方式实例化一个对象。
在java8中，已经取消了永久代，但是引入了一个元数据区的navite内存区

七、final
final可以修饰属性、方法和类
修饰属性时，相比于其他变量，它修饰的变量初始化以后不能修改。如果变量是基本数据类型，则相当于一个常数；如果变量是指针，则指针本身不变，不可指向其他对象，但对象本身可以变，数据也是对象。
修饰方法，表示该方法在子类不可重写
修饰类，表示该类不能被继承

八、static
可以修饰：属性，方法，代码段，内部类（静态内部类或嵌套内部类）